#!/usr/bin/env node
/*! @license Â©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */
/** Generates a browser-friendly version of the LDF client. */

var fs = require('fs'),
    path = require('path'),
    Transform = require('stream').Transform,
    browserify = require('browserify')();

var outputFile = path.normalize(__dirname + '/../browser/scripts/ldf-client.js'),
    browserLibsPath = path.normalize(__dirname + '/../browser/lib/'),
    modulesPath = path.normalize(__dirname + '/../node_modules/');

// Expose the following modules to the browser
expose('SparqlQuerySolver');
expose('LinkedDataFragmentsClient');
expose('Logger');
expose('N3', 'n3');

// Replace each library by its browser-specific version (if one exists)
var browserLibs = {};
fs.readdirSync(browserLibsPath).forEach(function (l) { browserLibs[l] = l });
transform(function (script, file) {
  // If the file itself has a browser version, return it
  var browserLib = browserLibs[file.split('/').pop()];
  if (browserLib)
    return fs.readFileSync(browserLibsPath + browserLib);

  // Otherwise, collect all require statements
  var requires = [], matchRequire = /require\(['"](?:.\/)?([a-zA-Z]+)['"]\)/g, match;
  while (match = matchRequire.exec(script))
    requires.push({ expression: match[0], name: match[1] });
  // Replace matching requires with a browser version
  requires.forEach(function (require) {
    if (browserLib = browserLibs[require.name + '.js'])
      script = script.replace(require.expression, 'require("../browser/lib/' + browserLib + '")');
  });
  return script;
});

// Write the browserified version
var output = fs.createWriteStream(outputFile),
    bundled = browserify.bundle();
bundled.on('data', function (data) {
  // Remove system-specific paths
  while (data.indexOf(modulesPath) > 0)
    data = data.replace(modulesPath, '');
  output.write(data);
});
bundled.on('end', function () { output.end(); });

// Includes the given module into the browserified version
function expose(module, file) {
  browserify.require(file || __dirname + '/../lib/' + module + '.js', { expose: module });
}

// Transforms each script with the given function
function transform(transformScript) {
  browserify.transform(function (file) {
    var transformer = new Transform(), script = '';
    transformer._transform = function (chunk, encoding, done) {
      script += chunk.toString();
      done();
    };
    transformer._flush = function (done) {
      transformer.push(transformScript(script, file));
      transformer.push(null);
      done();
    };
    return transformer;
  });
}
