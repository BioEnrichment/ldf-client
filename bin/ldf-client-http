#!/usr/bin/env node
/*! @license ©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

var path = require('path'),
    http = require('http'),
    url = require('url'),
    spawn = require('child_process').spawn;
var clientPath = path.join(__dirname, 'ldf-client');

// Parse arguments
var args = process.argv.slice(2);
if (args.length > 2) {
  console.log('usage: ldf-client-http [config.json] [port]');
  return process.exit(1);
}
var hasConfig = args.length >= 1 && !/^\d+$/.test(args[0]),
    configFile = hasConfig ? args[0] : path.join(__dirname, '../config-example.json'),
    port = parseInt(hasConfig ? args[1] : args[0], 10) || 3000;

// Start server
var server = http.createServer(onRequest);
server.listen(port);
console.log('Server running on http://localhost:' + port + '/');

// Handle a request
function onRequest(request, response) {
  var requestUrl = url.parse(request.url, true),
      path = requestUrl.pathname,
      query = requestUrl.query.query;
  if (path !== '/sparql' || !query)
    return writeResponse(400, JSON.stringify({ message: 'Resource not found' }));

  // Get the results of the query from the client
  var result = '',
      client = spawn(process.argv[0], [clientPath, configFile, query],
                     { stdio: ['ignore', 'pipe', 'ignore'] });
  client.stdout.setEncoding('utf8');
  client.stdout.on('data', function (data) { result += data; });
  client.on('exit', function (code) { writeResponse(code ? 500 : 200, result || '{}'); });
  response.on('close', function () { client.kill('SIGKILL'); });

  // Write a JSON response
  function writeResponse(statusCode, json) {
    response.writeHead(statusCode, { 'Content-type': 'application/json' });
    response.end(json);
  }
}
