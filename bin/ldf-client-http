#!/usr/bin/env node
/*! @license Â©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

var path = require('path'),
    http = require('http'),
    url = require('url'),
    spawn = require('child_process').spawn;
var clientPath = path.join(__dirname, 'ldf-client');

var MIME_JSON = 'application/json';
var MIME_TURTLE = 'text/turtle';
var MIME_PLAIN = 'text/plain';

// Retrieve and check arguments
var args = require('minimist')(process.argv.slice(2));
if (args._.length || args.help) {
  console.log('usage: ldf-client-http [-c config.json] [-p port]');
  return process.exit(1);
}
var configFile = args.c || path.join(__dirname, '../config-default.json'),
    port = parseInt(args.p, 10) || 3000;

// Start server
var server = http.createServer(onRequest);
server.listen(port);
console.log('Server running on http://localhost:' + port + '/');

// Handle a request
function onRequest(request, response) {
  var requestUrl = url.parse(request.url, true),
      path = requestUrl.pathname,
      query = requestUrl.query.query;
  if (path !== '/sparql' || !query) {
    response.writeHead(404, { 'Content-type': MIME_JSON });
    response.end(JSON.stringify({ message: 'Resource not found' }));
  }
  // Security check on query (shouldn't be a file)
  if (/^\\|^\/|\.\.\\|\.\.\//.test(query))
    query = 'SELECT ';

  // Get the results of the query from the client
  var client = spawn(process.argv[0], [clientPath, query, '-c', configFile],
                     { stdio: ['ignore', 'pipe', 'pipe'] });

  // Write a successful data response
  client.stdout.setEncoding('utf8');
  client.stdout.once('data', function (data) {
    if (!response.headersSent) {
      response.writeHead(200, { 'Content-type': data[0] === '{' ? MIME_JSON : MIME_TURTLE });
      response.write(data);
      client.stdout.pipe(response);
    }
  });
  // Write an error response
  client.stderr.setEncoding('utf8');
  client.stderr.once('data', function (data) {
    if (!response.headersSent) {
      response.writeHead(400, { 'Content-type': MIME_PLAIN });
      response.write(data);
      client.stderr.pipe(response);
    }
  });

  // Stop the client if the connection is terminated
  response.on('close', function () { client.kill('SIGKILL'); });
}
