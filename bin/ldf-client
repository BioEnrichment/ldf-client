#!/usr/bin/env node
/*! @license ©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

var fs = require('fs'),
    path = require('path'),
    N3 = require('n3'),
    ldf = require('../ldf-client');

var queryMatcher = /^\s*(?:PREFIX|BASE|SELECT|CONSTRUCT|ASK|DESCRIBE)\s+/i;

// Parse arguments
var args = process.argv.slice(2);
if (args.length < 1 || args.length > 2 || /^--?h(elp)?$/.test(args[0])) {
  console.log('usage: ldf-client [config.json] query');
  return process.exit(1);
}
var hasConfig = args.length >= 2,
    configFile = hasConfig ? args[0] : path.join(__dirname, '../config-default.json'),
    queryFile  = hasConfig ? args[1] : args[0],
    config = JSON.parse(fs.readFileSync(configFile, { encoding: 'utf8' })),
    isQuery = queryMatcher.test(queryFile),
    query = isQuery ? queryFile : fs.readFileSync(queryFile, { encoding: 'utf8' });

// Execute query
var client = new ldf.LinkedDataFragmentsClient(config),
    querySolver = new ldf.SparqlQuerySolver(client, config.prefixes);
querySolver.getQueryResults(query)
.then(function (result) {
  if (result.rows) {
    console.log(JSON.stringify(result.rows, null, '  '));
  }
  else if (result.triples) {
    var writer = new N3.Writer(process.stdout, config.prefixes);
    writer.addTriples(result.triples);
    writer.end();
  }
})
.fail(function (error) {
  console.error(JSON.stringify(error.stack));
  process.exit(1);
});
