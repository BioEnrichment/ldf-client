#!/usr/bin/env node
/*! @license ©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

// Retrieve and check arguments
var args = process.argv.slice(2);
if (args.length < 1 || args.length > 2 || /^--?h(elp)?$/.test(args[0])) {
  console.log('usage: ldf-client [config.json] query');
  return process.exit(1);
}

var fs = require('fs'),
    path = require('path'),
    N3 = require('n3'),
    SparqlIterator = require('../lib/iterators/SparqlIterator'),
    FragmentsClient = require('../lib/http/FragmentsClient');
var queryMatcher = /^\s*(?:PREFIX|BASE|SELECT|CONSTRUCT|ASK|DESCRIBE)\s+/i;

// Parse and initialize configuration
var hasConfig = args.length >= 2,
    configFile = hasConfig ? args[0] : path.join(__dirname, '../config-default.json'),
    queryFile  = hasConfig ? args[1] : args[0],
    config = JSON.parse(fs.readFileSync(configFile, { encoding: 'utf8' })),
    isQuery = queryMatcher.test(queryFile),
    query = isQuery ? queryFile : fs.readFileSync(queryFile, { encoding: 'utf8' });
config.fragmentsClient = new FragmentsClient(config.datasource, config);

// Execute the query and output its results
var sparqlIterator = new SparqlIterator(query, config);
switch (sparqlIterator.parsedQuery.type) {
  case 'SELECT':
    sparqlIterator.on('data', function (row) {
      console.log(JSON.stringify(row));
    })
    .on('error', function (error) {
      console.error(error.stack);
    });
  break;
  default:
    throw new Error('Unsupported query type: ' + sparqlIterator.parsedQuery.type);
}
