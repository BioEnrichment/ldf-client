#!/usr/bin/env node
/*! @license Â©2013 Ruben Verborgh - Multimedia Lab / iMinds / Ghent University */

// Retrieve and check arguments
var args = require('minimist')(process.argv.slice(2));
if (args._.length < 1 || args._.length > 2 || args.help) {
  console.log('usage: ldf-client [startFragment] query.sparql [-c config.json] [--help]');
  return process.exit(1);
}

var fs = require('fs'),
    path = require('path'),
    N3 = require('n3'),
    SparqlIterator = require('../ldf-client').SparqlIterator,
    FragmentsClient = require('../ldf-client').FragmentsClient,
    Logger = require('../ldf-client').Logger;

var queryMatcher = /^\s*(?:PREFIX|BASE|SELECT|CONSTRUCT|ASK|DESCRIBE)\s+/i;

Logger.disable('info', 'debug');
Logger.isCSV = true;

// Parse and initialize configuration
var configFile = args.c ? args.c : path.join(__dirname, '../config-default.json'),
    config = JSON.parse(fs.readFileSync(configFile, { encoding: 'utf8' })),
    queryFile  = args._[1] || args._[0],
    startFragment = args._[1] ? args._[0] : config.startFragment,
    isQuery = queryMatcher.test(queryFile),
    query = isQuery ? queryFile : fs.readFileSync(queryFile, { encoding: 'utf8' });
config.fragmentsClient = new FragmentsClient(startFragment, config);

// Execute the query and output its results
try {
  var sparqlIterator = new SparqlIterator(query, config);
  switch (sparqlIterator.queryType) {
  // Write a boolean
  case 'ASK':
    sparqlIterator.on('data', console.log);
    break;
  // Write JSON representations of the rows
  case 'SELECT':
    sparqlIterator.on('data', function (row) {
      console.log(JSON.stringify(row));
    });
    break;
  // Write an RDF representation of all results
  case 'CONSTRUCT':
  case 'DESCRIBE':
    var writer = new N3.Writer(process.stdout, config.prefixes);
    sparqlIterator.on('data', function (triple) { writer.addTriple(triple); })
                  .on('end',  function () { writer.end(); });
    break;
  default:
    throw new SparqlIterator.UnsupportedQueryError(query);
  }

  // Report an error's stack trace
  sparqlIterator.on('error', function (error) {
    console.error('ERROR: An error occured during query execution.\n');
    console.error(error.stack);
  });
}
// Report a synchronous error
catch (error) {
  console.error('ERROR: Query execution could not start.\n');
  switch (error.name) {
  case 'InvalidQueryError':
  case 'UnsupportedQueryError':
    console.error(error.message);
    break;
  default:
    console.error(error.stack);
  }
}
